
var Masonry = function (container) {

	var container = container;
	var pageWidth;
	var itemWidth = 250;
	var gap = 20;
	var columnNumber;

	var timeout;

	var items = [];

	this.init = function () {
		pageWidth = $(container).width();
		columnNumber = Math.floor((pageWidth + gap) / (itemWidth + gap));
		if (columnNumber < 1) {
			columnNumber = 1;
		}
	};

	this.append = function (item) {
		items.push(item);
	};

	this.remove = function (item) {
		var index = items.indexOf(item);
		if (index !== -1) {
			items.splice(index, 1);
		}
	};

	this.draw = function (reason) {
		//console.log('Try to draw: ' + reason);
		if (timeout) {
			clearTimeout(timeout);
		}
		timeout = setTimeout(_draw, 100);
	}

	var _draw = function () {
		//console.log('Draw');
		var columns = [];
		for (var i = 0; i < columnNumber; i++) {
			columns[i] = 0;
		}
		// Set each item position
		for (var key in items) {
			var col = _getSmallestCol(columns);
			items[key].style.top = columns[col] + 'px';
			items[key].style.left = ((itemWidth + gap) * col) + 'px';
			items[key].className += ' note-visible';
			columns[col] += gap + $(items[key]).height();
		}
	};

	var _getSmallestCol = function (columns) {
		var smallestCol = 0;
		var minColSize = 9999999;
		for (var key in columns) {
			if (columns[key] < minColSize) {
				minColSize = columns[key];
				smallestCol = key;
			}
		}
		return smallestCol;
	};

	var _onWindowResizeInit = this.init;
	var _onWindowResizeDraw = this.draw;

	// Check window resizing
	window.onresize = function () {
		_onWindowResizeInit();
		_onWindowResizeDraw('Window resize');
	}

	// Initialize the grid
	this.init();

};